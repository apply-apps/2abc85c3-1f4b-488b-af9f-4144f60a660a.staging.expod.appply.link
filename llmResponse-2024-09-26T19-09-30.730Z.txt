```js
// App.js
import React, { useState, useRef, useEffect } from 'react';
import { StyleSheet, Text, View, TextInput, TouchableOpacity, ScrollView, Keyboard, TouchableWithoutFeedback, KeyboardAvoidingView, Platform, ActivityIndicator } from 'react-native';
import axios from 'axios';
import * as SplashScreen from 'expo-splash-screen';

const API_URL = 'https://apihub.staging.appply.link/chatgpt';

const App = () => {
  const [hero, setHero] = useState('');
  const [villain, setVillain] = useState('');
  const [plot, setPlot] = useState('');
  const [story, setStory] = useState('');
  const [currentPage, setCurrentPage] = useState(0);
  const [loading, setLoading] = useState(false);
  const [appIsReady, setAppIsReady] = useState(false);
  const [error, setError] = useState('');

  const villainInputRef = useRef(null);
  const plotInputRef = useRef(null);

  useEffect(() => {
    async function prepare() {
      try {
        await SplashScreen.preventAutoHideAsync();
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (e) {
        console.warn(e);
      } finally {
        setAppIsReady(true);
      }
    }

    prepare();
  }, []);

  useEffect(() => {
    if (appIsReady) {
      SplashScreen.hideAsync();
    }
  }, [appIsReady]);

  const generateStory = async () => {
    if (!hero || !villain || !plot) {
      setError('Please fill in all fields');
      return;
    }

    setLoading(true);
    setError('');
    try {
      const response = await axios.post(API_URL, {
        messages: [
          { role: "system", content: "You are a children's storyteller. Create a short fairy tale suitable for kids." },
          { role: "user", content: `Create a short fairy tale with ${hero} as the hero, ${villain} as the villain, and the following plot: ${plot}. The story should be no longer than 100 words and divided into 3 short paragraphs.` }
        ],
        model: "gpt-4o"
      }, { timeout: 120000 });  // 120 seconds timeout
      const { data } = response;
      setStory(data.response.split('\n\n'));
      setCurrentPage(0);
    } catch (error) {
      console.error('Error generating story:', error);
      setError('Failed to generate story. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const nextPage = () => {
    if (currentPage < story.length - 1) {
      setCurrentPage(currentPage + 1);
    }
  };

  const prevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  const dismissKeyboard = () => {
    Keyboard.dismiss();
  };

  if (!appIsReady) {
    return null;
  }

  return (
    <TouchableWithoutFeedback onPress={dismissKeyboard}>
      <KeyboardAvoidingView 
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        style={styles.container}
      >
        <ScrollView contentContainerStyle={styles.scrollViewContent}>
          <View style={styles.formContainer}>
            <Text style={styles.title}>Fairy Tale Generator</Text>
            <TextInput
              style={styles.input}
              placeholder="Hero's name"
              value={hero}
              onChangeText={setHero}
              maxLength={20}
              returnKeyType="next"
              onSubmitEditing={() => villainInputRef.current.focus()}
            />
            <TextInput
              ref={villainInputRef}
              style={styles.input}
              placeholder="Villain's name"
              value={villain}
              onChangeText={setVillain}
              maxLength={20}
              returnKeyType="next"
              onSubmitEditing={() => plotInputRef.current.focus()}
            />
            <TextInput
              ref={plotInputRef}
              style={styles.input}
              placeholder="Plot"
              value={plot}
              onChangeText={setPlot}
              multiline
              numberOfLines={3}
              maxLength={100}
            />
            <TouchableOpacity 
              style={[styles.button, loading && styles.buttonDisabled]} 
              onPress={generateStory} 
              disabled={loading}
            >
              {loading ? (
                <View style={styles.buttonContent}>
                  <ActivityIndicator size="small" color="#FFFFFF" style={styles.spinner} />
                  <Text style={styles.buttonText}>Generating</Text>
                </View>
              ) : (
                <Text style={styles.buttonText}>Generate Story</Text>
              )}
            </TouchableOpacity>
            {error ? <Text style={styles.errorText}>{error}</Text> : null}
          </View>
          {story.length > 0 && (
            <View style={styles.storyContainer}>
              <ScrollView contentContainerStyle={styles.storyContent}>
                <Text style={styles.storyText}>{story[currentPage]}</Text>
              </ScrollView>
              <View style={styles.pageControls}>
                <TouchableOpacity onPress={prevPage} disabled={currentPage === 0}>
                  <Text style={[styles.pageButton, currentPage === 0 && styles.disabledButton]}>Previous</Text>
                </TouchableOpacity>
                <Text style={styles.pageIndicator}>{`${currentPage + 1}/${story.length}`}</Text>
                <TouchableOpacity onPress={nextPage} disabled={currentPage === story.length - 1}>
                  <Text style={[styles.pageButton, currentPage === story.length - 1 && styles.disabledButton]}>Next</Text>
                </TouchableOpacity>
              </View>
            </View>
          )}
        </ScrollView>
      </KeyboardAvoidingView>
    </TouchableWithoutFeedback>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5DC', // Changed to beige
  },
  scrollViewContent: {
    flexGrow: 1,
    padding: 20,
    alignItems: 'center',
    justifyContent: 'flex-start',
  },
  formContainer: {
    width: '100%',
    alignItems: 'center',
    marginTop: 40,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FF69B4',
    marginBottom: 20,
  },
  input: {
    width: '100%',
    backgroundColor: 'white',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
    fontSize: 16,
  },
  button: {
    backgroundColor: '#FF69B4',
    padding: 10,
    borderRadius: 5,
    marginTop: 10,
    width: '100%',
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
  buttonDisabled: {
    backgroundColor: '#ccc',
  },
  buttonContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  spinner: {
    marginRight: 10,
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
    textAlign: 'center',
    fontSize: 18,
  },
  errorText: {
    color: 'red',
    marginTop: 10,
  },
  storyContainer: {
    marginTop: 20,
    width: '100%',
    height: 300,
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 10,
  },
  storyContent: {
    flexGrow: 1,
    justifyContent: 'center',
  },
  storyText: {
    fontSize: 18,
    lineHeight: 26,
    textAlign: 'center',
  },
  pageControls: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 10,
  },
  pageButton: {
    color: '#FF69B4',
    fontWeight: 'bold',
    fontSize: 16,
  },
  disabledButton: {
    color: '#ccc',
  },
  pageIndicator: {
    color: '#FF69B4',
    fontSize: 16,
  },
});

export default App;
// End of App.js
```