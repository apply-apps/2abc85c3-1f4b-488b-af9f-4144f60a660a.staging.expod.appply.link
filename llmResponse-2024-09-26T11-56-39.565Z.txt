```js
// App.js
import React, { useState } from 'react';
import { StyleSheet, Text, View, TextInput, TouchableOpacity, ScrollView, ActivityIndicator } from 'react-native';
import axios from 'axios';

const API_URL = 'http://apihub.p.appply.xyz:3300/chatgpt';

const App = () => {
  const [hero, setHero] = useState('');
  const [villain, setVillain] = useState('');
  const [plot, setPlot] = useState('');
  const [story, setStory] = useState('');
  const [currentPage, setCurrentPage] = useState(0);
  const [loading, setLoading] = useState(false);

  const generateStory = async () => {
    if (!hero || !villain || !plot) {
      alert('Please fill in all fields');
      return;
    }

    setLoading(true);
    try {
      const response = await axios.post(API_URL, {
        messages: [
          { role: "system", content: "You are a children's storyteller. Create a short fairy tale suitable for kids." },
          { role: "user", content: `Create a short fairy tale with ${hero} as the hero, ${villain} as the villain, and the following plot: ${plot}. The story should be divided into 3 short paragraphs.` }
        ],
        model: "gpt-4o"
      });
      const { data } = response;
      setStory(data.response.split('\n\n'));
      setCurrentPage(0);
    } catch (error) {
      console.error('Error generating story:', error);
      alert('Failed to generate story. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const nextPage = () => {
    if (currentPage < story.length - 1) {
      setCurrentPage(currentPage + 1);
    }
  };

  const prevPage = () => {
    if (currentPage > 0) {
      setCurrentPage(currentPage - 1);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Fairy Tale Generator</Text>
      <TextInput
        style={styles.input}
        placeholder="Hero's name"
        value={hero}
        onChangeText={setHero}
        maxLength={20}
      />
      <TextInput
        style={styles.input}
        placeholder="Villain's name"
        value={villain}
        onChangeText={setVillain}
        maxLength={20}
      />
      <TextInput
        style={styles.input}
        placeholder="Plot"
        value={plot}
        onChangeText={setPlot}
        multiline
        numberOfLines={3}
        maxLength={100}
      />
      <TouchableOpacity style={styles.button} onPress={generateStory} disabled={loading}>
        <Text style={styles.buttonText}>Generate Story</Text>
      </TouchableOpacity>
      {loading ? (
        <ActivityIndicator size="large" color="#FFC0CB" />
      ) : story.length > 0 ? (
        <View style={styles.storyContainer}>
          <ScrollView contentContainerStyle={styles.storyContent}>
            <Text style={styles.storyText}>{story[currentPage]}</Text>
          </ScrollView>
          <View style={styles.pageControls}>
            <TouchableOpacity onPress={prevPage} disabled={currentPage === 0}>
              <Text style={[styles.pageButton, currentPage === 0 && styles.disabledButton]}>Previous</Text>
            </TouchableOpacity>
            <Text style={styles.pageIndicator}>{`${currentPage + 1}/${story.length}`}</Text>
            <TouchableOpacity onPress={nextPage} disabled={currentPage === story.length - 1}>
              <Text style={[styles.pageButton, currentPage === story.length - 1 && styles.disabledButton]}>Next</Text>
            </TouchableOpacity>
          </View>
        </View>
      ) : null}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#FFE4E1',
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FF69B4',
    marginBottom: 20,
  },
  input: {
    width: '100%',
    backgroundColor: 'white',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
  button: {
    backgroundColor: '#FF69B4',
    padding: 10,
    borderRadius: 5,
    marginTop: 10,
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
    textAlign: 'center',
  },
  storyContainer: {
    marginTop: 20,
    width: '100%',
    height: 300,
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 10,
  },
  storyContent: {
    flexGrow: 1,
    justifyContent: 'center',
  },
  storyText: {
    fontSize: 16,
    lineHeight: 24,
    textAlign: 'center',
  },
  pageControls: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 10,
  },
  pageButton: {
    color: '#FF69B4',
    fontWeight: 'bold',
  },
  disabledButton: {
    color: '#ccc',
  },
  pageIndicator: {
    color: '#FF69B4',
  },
});

export default App;
// End of App.js
```